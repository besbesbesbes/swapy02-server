generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int       @id @default(autoincrement()) @map("user_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  userName        String    @unique @map("user_name")
  userDisplayName String?   @map("user_display_name")
  userEmail       String    @unique @map("user_email")
  userPassword    String    @map("user_password")
  userBio         String?   @map("user_bio")
  userProfilePic  String    @default("../src/pics/user-pic-default.png") @map("user_profile_pic")
  userRating      Decimal   @default(0) @map("user_rating")
  userRatingCount Int       @default(0) @map("user_rating_count")
  userLocation    String?   @map("user_location")
  userAddress     String?   @map("user_address")
  userIsReady     Boolean   @default(false) @map("user_is_ready")
  // Relations
  assets          Asset[]
  offersAsOfferor Offer[]   @relation("OffersAsOfferor")
  offersAsSwaper  Offer[]   @relation("OffersAsSwaper")
  messages        Message[]
}

model Asset {
  assetId              Int            @id @default(autoincrement()) @map("asset_id")
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @updatedAt @map("updated_at")
  user                 User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId               Int            @map("user_id")
  assetName            String         @map("asset_name")
  assetCategory        AssetCategory  @default(MISCELLANEOUS) @map("asset_category")
  assetBrand           String?        @map("asset_brand")
  assetCondition       AssetCondition @default(NEW) @map("asset_condition")
  assetNote            String?        @map("asset_note") @db.VarChar(1000)
  assetThumbnail       String         @map("asset_thumbnail")
  assetStatus          AssetStatus    @default(CREATED) @map("asset_status")
  assetOfferorCount    Int            @default(0) @map("asset_offeror_count")
  assetSwaperCount     Int            @default(0) @map("asset_swaper_count")
  assetIsReady         Boolean        @default(true) @map("asset_is_ready")
  assetIsNew           Boolean        @default(true) @map("asset_is_new")
  assetShippingAddress String?        @map("asset_shipping_address")
  assetPics            AssetPic[]
  offerAssets          OfferAsset[]
  assetUserIsRate      Boolean        @default(false) @map("asset_user_is_rate")
}

enum AssetCategory {
  BEAUTY
  FOOD
  GROCERIES
  FORNITURE
  ELECTRONIC
  CLOTHES
  SMARTPHONE
  VIHICLE
  ACCESSORIES
  MISCELLANEOUS
}

enum AssetCondition {
  NEW
  MINT
  GOOD
  ACCEPTABLE
  BROKEN
  PARTS
}

enum AssetStatus {
  CREATED
  READY
  MATCHED
  SHIPPED
  RECEIVED
}

model AssetPic {
  assetPicId Int      @id @default(autoincrement()) @map("asset_pic_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  assetPic   String   @map("asset_pic") @db.VarChar(1000)
  asset      Asset    @relation(fields: [assetId], references: [assetId], onDelete: Cascade)
  assetId    Int      @map("asset_id")

  @@map("Asset_Pic")
}

model Offer {
  offerId       Int          @id @default(autoincrement()) @map("offer_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  offerName     String       @map("offer_name")
  offerStatus   OfferStatus  @default(CREATED) @map("offer_status")
  // Relations
  offeror       User         @relation("OffersAsOfferor", fields: [offerorId], references: [userId], onDelete: Cascade)
  offerorId     Int          @map("offeror_id")
  swaper        User         @relation("OffersAsSwaper", fields: [swaperId], references: [userId], onDelete: Cascade)
  swaperId      Int          @map("swaper_id")
  offerorStatus Boolean      @default(false) @map("offeror_status")
  swaperStatus  Boolean      @default(false) @map("swaper_status")
  offerAssets   OfferAsset[]
  messages      Message[]
}

enum OfferStatus {
  CREATED
  ACCEPTED
  REJECTED
}

model OfferAsset {
  offerAssetId Int      @id @default(autoincrement()) @map("offer_asset_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  // Relations
  offer        Offer    @relation(fields: [offerId], references: [offerId], onDelete: Cascade)
  offerId      Int      @map("offer_id")
  asset        Asset    @relation(fields: [assetId], references: [assetId], onDelete: Cascade)
  assetId      Int      @map("asset_id")

  @@map("Offer_Asset")
}

model Message {
  messageId     Int      @id @default(autoincrement()) @map("message_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  messageTxt    String   @map("message_txt")
  messageIsAuto Boolean  @map("message_is_auto")
  //Relation
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        Int      @map("user_id")
  offer         Offer    @relation(fields: [offerId], references: [offerId], onDelete: Cascade)
  offerId       Int      @map("offer_id")
}
